# Dados
import numpy as np #biblioteca para c√°lculos num√©ricos
from scipy import stats #biblioteca para estat√≠stica

# Dados
dados = [10, 20, 30, 40, 50]

# C√°lculo da m√©dia - m√©dia dos valores
media = np.mean(dados)
print("M√©dia:", media)


# Dados

# C√°lculo da mediana - melhor forma de alcan√ßar o centro dos dados
mediana = np.median(dados)
print("Mediana:", mediana)
#Se o n√∫mero de observa√ß√µes for √≠mpar, a mediana √© o valor do meio; se for par, √© a m√©dia dos dois valores centrais.

dadosmoda = [10, 20, 20, 30, 30, 30, 40, 50]

# C√°lculo da moda - O que mais aparece
moda = stats.mode(dadosmoda, keepdims=True)  # `keepdims` para compatibilidade com futuras vers√µes
print("Moda:", moda.mode[0])


dados = [10, 20, 30, 40, 50]

# C√°lculo da vari√¢ncia
variancia = np.var(dados, ddof=0)  # `ddof=0` para popula√ß√£o, `ddof=1` para amostra
print("Vari√¢ncia:", variancia)

#A vari√¢ncia mede a dispers√£o dos dados em rela√ß√£o √† m√©dia. Em outras palavras, 
# ela indica o qu√£o espalhados os valores est√£o. Quanto maior a vari√¢ncia, maior a dispers√£o dos dados.


dados = [10, 20, 30, 40, 50]

# C√°lculo do desvio padr√£o
desvio_padrao = np.std(dados, ddof=0)  # `ddof=0` para popula√ß√£o, `ddof=1` para amostra
print("Desvio Padr√£o:", desvio_padrao)

#O desvio padr√£o √© a raiz quadrada da vari√¢ncia. 
# Ele √© uma medida de dispers√£o que indica o quanto os valores se afastam da m√©dia.

import matplotlib.pyplot as plt

media, desvio_padrao = 30, 14.14 # Isso define o centro e a dispers√£o da distribui√ß√£o.
dados_normal = np.random.normal(media, desvio_padrao, 1000) #1000 valores s√£o gerados a partir de uma distribui√ß√£o normal com os par√¢metros fornecidos.

# Visualizando a distribui√ß√£o
plt.hist(dados_normal, bins=30, density=True, alpha=0.6, color='g') #O histograma mostra a frequ√™ncia dos dados simulados em 30 intervalos (bins). A densidade normaliza os valores para criar uma distribui√ß√£o de probabilidade.
xmin, xmax = plt.xlim() #xmin e xmax: Definem os limites do gr√°fico com base no histograma.
x = np.linspace(xmin, xmax, 100) #np.linspace: Cria 100 pontos igualmente espa√ßados entre xmin e xmax.
p = stats.norm.pdf(x, media, desvio_padrao) #stats.norm.pdf: Calcula a densidade de probabilidade da distribui√ß√£o normal nos pontos de x
plt.plot(x, p, 'k', linewidth=2) #recebe os valores de x, p, "k" para preto e linewidth=2 para a largura da linha.
plt.title("Distribui√ß√£o Normal")

# Salvando o gr√°fico como imagem
plt.savefig("distribuicao_normal.png")
print("Gr√°fico salvo como 'distribuicao_normal.png'")

#Curva de Gauss, √© uma das distribui√ß√µes mais importantes na estat√≠stica. 
# Ela √© frequentemente usada para modelar fen√¥menos naturais, sociais e at√© comportamentais.
#Caracter√≠sticas principais:
#Simetria: A curva √© sim√©trica em torno da m√©dia (ùúá).
#M√©dia, mediana e moda iguais: Esses valores coincidem no centro da distribui√ß√£o.
#Formato de sino: A maior concentra√ß√£o de dados est√° pr√≥xima da m√©dia.
#68-95-99.7 Regra:
#68% dos dados est√£o a 1 desvio padr√£o (ùúé) da m√©dia.
#95% est√£o a 2 desvios padr√µes.
#99.7% est√£o a 3 desvios padr√µes.
#Ela √© usada em:
#Estat√≠sticas inferenciais (testes de hip√≥tese, intervalos de confian√ßa).
#Modelagem de fen√¥menos como altura, peso, pontua√ß√µes de testes.
#Machine learning e data science, como normaliza√ß√£o de dados.
